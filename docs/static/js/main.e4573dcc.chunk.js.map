{"version":3,"sources":["components/atoms/ClockView.tsx","components/atoms/ClockPretty.tsx","components/molecules/Clock.tsx","components/pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["ClockView","styled","div","ClockPretty","Clock","props","tArr","time","split","map","v","i","key","sleep","n","Promise","resolve","setTimeout","langLocation","window","navigator","language","App","useState","Date","toLocaleString","setTime","useEffect","a","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ylBAEA,IAceA,EAdGC,IAAOC,IAAV,K,6GCAf,IAKeC,EALKF,IAAOC,IAAV,KCaFE,EAXD,SAACC,GACX,IAAMC,EAAOD,EAAME,KAAKC,MAAM,KAAK,GAAGA,MAAM,IAC5C,OACI,kBAAC,EAAD,KACKF,EAAKG,KAAI,SAACC,EAAEC,GACT,OAAO,kBAAC,EAAD,CAAaC,IAAKD,GAAID,QCNvCG,EAAQ,SAACC,GAAD,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAE1DI,EAAeC,OAAOC,UAAUC,SAevBC,MAbf,WAAgB,IAAD,EACaC,oBAAU,IAAIC,MAAQC,eAAeP,IADlD,mBACJX,EADI,KACEmB,EADF,KAUX,OARAC,qBAAU,WACN,sBAAC,sBAAAC,EAAA,sEAEaf,EAAM,KAFnB,OAGOa,GAAS,IAAIF,MAAQC,eAAe,OAH3C,yDAAD,MAOG,kBAAC,EAAD,CAAOlB,KAAMA,KCLlBsB,EAAcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtChB,UAAUiB,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfzB,UAAUiB,cAAcS,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnGjEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkBrB,SAAkBrB,GACvB,GAA6C,kBAAmBhB,UAAW,CAMzE,GAJkB,IAAIsC,IACpBC,cACAxC,OAAOY,SAAS6B,MAEJC,SAAW1C,OAAOY,SAAS8B,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,cAAN,sBAEP9B,IAgEV,SAAiCM,EAAeC,GAE9C2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjD,UAAUiB,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BpB,OAAOY,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BhB,UAAUiB,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC3C/BC,K","file":"static/js/main.e4573dcc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst ClockView = styled.div`\n    @import url('https://fonts.googleapis.com/css2?family=Ranchers&display=swap');\n    font-family: 'Ranchers', cursive;\n    left: 0;\n    right: 0;\n    margin: auto;\n    width: 45vh;\n    text-align: center;\n    height: 100vh;\n    line-height: 100vh;\n    font-size: 10vh;\n    display: flex;\n`;\n\nexport default ClockView;\n","import styled from 'styled-components';\n\nconst ClockPretty = styled.div`\n    margin: 0.25vh;\n    width: 5vh;\n`;\n\nexport default ClockPretty;\n","import React from 'react';\nimport ClockView from '../atoms/ClockView';\nimport ClockPretty from '../atoms/ClockPretty';\n\nconst Clock = (props) => {\n    const tArr = props.time.split(\" \")[1].split(\"\");\n    return (\n        <ClockView>\n            {tArr.map((v,i) => {\n                return <ClockPretty key={i}>{v}</ClockPretty>;\n            })}\n        </ClockView>\n    );\n}\n\nexport default Clock;\n","import React, {useState, useEffect} from 'react';\nimport Clock from '../molecules/Clock';\n\nconst sleep = (n) => new Promise(resolve => setTimeout(resolve, n));\n\nconst langLocation = window.navigator.language;\n\nfunction App() {\n    const [time, setTime] = useState((new Date()).toLocaleString(langLocation));\n    useEffect(() => {\n        (async () => {\n            while (true) {\n                await sleep(100);\n                setTime((new Date()).toLocaleString(\"ja\"));\n            }\n        })();\n    });\n    return <Clock time={time} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}